public function checkEligibilityAPI()
{

log_message('info', '✅ checkEligibilityAPI called');
// $request = service('request');
$cibil = 680;
if ($this->request->getVar('previous_emi') === "") {
# code...
$previous_emi = 0;
} else {
# code...
$previous_emi = $this->request->getVar('previous_emi');
}
if ($this->request->getVar('business_time') === "") {
# code...
$business_time = 0;
} else {
# code...
$current_year = date('Y');
$business_time = round($current_year - $this->request->getVar('business_time'));
}
// Get Bank Statement Analyzer data
// ✅ Fetch CAM Summary from bank_statement_reports
$db = db_connect();
$builder = $db->table('bank_statement_reports');
$builder->select('*');
$builder->where('member_id', $this->request->getVar('memberId_api'));
$row = $builder->get()->getRow();

$cam_summary = [];
$scorecard_summary = [];

if ($row) {
$report_data = json_decode($row->report_json, true);

$camSheets = $report_data['data']['statement']['Bankstatement 1']['CAM Sheet'] ?? [];
$scorecard = $report_data['data']['statement']['Bankstatement 1']['Summary - Scorecard'] ?? [];

// ✅ Extract Consolidated CAM data
$consolidated = null;
foreach ($camSheets as $sheet) {
if (isset($sheet['Month']) && strtolower($sheet['Month']) === 'consolidated') {
$consolidated = $sheet;
break;
}
}

$allowedCamKeys = [
'Total of EMI Amount',
'Total No of EMI',
'Total sum of Credit Transactions',
'Total No of Cheque Bounce Outward',
'Total No of Inward UPI Transactions',
'Total of Inward UPI Amount',
'Total cheque return',
'Total No of ECS Failure',
'Total No of NACH Failure',
'Total number of ECS and NACH failures',
'Total No of Outward Payment Bounce',
'Total sum of Cash Deposits',
'Total debit transactions sum',
'Total of Outward UPI Amount'
];

if ($consolidated) {
foreach ($consolidated as $key => $value) {
if (in_array($key, $allowedCamKeys)) {
$cam_summary[$key] = $value;
}
}
}

// ✅ Extract Scorecard Summary
$highlightScoreItems = [
'Monthly Average Balance',
'Monthly Average Surplus'
];

foreach ($scorecard as $item) {
$itemName = $item['Item'] ?? '';
$itemDetail = $item['Details'] ?? null;

if (in_array($itemName, $highlightScoreItems)) {
$scorecard_summary[$itemName] = $itemDetail;
}
}
}

// ✅ Combine all input data

// $name = $this->request->getVar('panName');
// $mobile = $this->request->getVar('mobile');
// $panNumber = $this->request->getVar('panNumber');
// $dataApi = array(
// 'name' => $name,
// 'consent' => "Y",
// "mobile" => $mobile,
// "pan" => $panNumber
// );
// $data_json = json_encode($dataApi);


// $curl = curl_init();

// curl_setopt_array($curl, array(
// CURLOPT_URL => 'https://kyc-api.surepass.app/api/v1/credit-report-experian/fetch-report',
// CURLOPT_RETURNTRANSFER => true,
// CURLOPT_ENCODING => '',
// CURLOPT_MAXREDIRS => 10,
// CURLOPT_TIMEOUT => 0,
// CURLOPT_FOLLOWLOCATION => true,
// CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
// CURLOPT_CUSTOMREQUEST => 'POST',
// CURLOPT_POSTFIELDS => $data_json,
// CURLOPT_HTTPHEADER => array(
// 'Authorization: Bearer ' . getenv('SUREPASS_API_KEY_PROD'),
// // 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0ODM0MzIxOCwianRpIjoiYzAxY2ZmNDItZTBkYi00YjdhLWFkZWMtZmJmNmE1M2JmZDQwIiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2Lm5hbWFub2poYTdAc3VyZXBhc3MuaW8iLCJuYmYiOjE3NDgzNDMyMTgsImV4cCI6MTc1MDkzNTIxOCwiZW1haWwiOiJuYW1hbm9qaGE3QHN1cmVwYXNzLmlvIiwidGVuYW50X2lkIjoibWFpbiIsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.kyAlKocj2wsHG5vc34NMdKUPa7d4jKBMHlLzuJoUUpY',
// 'Content-Type: application/json'
// ),
// ));

// $response = curl_exec($curl);
// $err = curl_error($curl);
// $response_decode = json_decode($response, true);
// log_message('info', 'Experian CIBIL Check API Called and Success: ' . $response);



// curl_close($curl);
// if ($err) {
// // echo "cURL Error #:" . $err;
// log_message('error', 'Experian Cibil API Failed: ' . json_encode($err));

// return $this->respond(['error' => 'Internal Exception!' . $err], 502);
// } else {

// $cibil = $response_decode['data']['credit_score'];
// $cibilReport = $response;
$data = [
'stock' => $this->request->getVar('stock'),
'daily_sales' => $this->request->getVar('daily_sales'),
'purchase_monthly' => $this->request->getVar('purchase_monthly'),
'cibil_score' => $cibil,
// 'cibilReport' => $cibilReport,
'business_time' => $business_time,
'location' => $this->request->getVar('location'),
'business_type' => $this->request->getVar('business_type'),
'previous_emi' => $previous_emi,
'memberId' => $this->request->getVar('memberId_api'),
'cam_summary' => $cam_summary,
'scorecard_summary' => $scorecard_summary
];

// Load the LoanEligibilityModel and pass input data
$loanModel = new LoanEligibilityModel();
$loanModel->setData($data);

$result = $loanModel->calculateLoanEligibility();
// Merge input data with result for passing to view
$data['result'] = $result;
// member data update
$data_eli_run = [
'cibil' => $cibil,
'member_id' => $this->request->getVar('memberId_api'),
'cibilReport' => null,
'first_date' => date('Y-m-d'),
'loan_amount' => $result['LoanAmount'],
'roi' => $result['FixedROI'],
'tenure' => $result['Tenure'],
'emi' => $result['EMI'],
'score' => $result['Score'],
'eligibility' => $result['Eligibility'],
'reason' => $result['Reason'],
];
$db = db_connect();
$builder = $db->table('initial_eli_run');
$builder->upsert($data_eli_run);
// return view('eli-page', $data);
if (is_null($data)) {
return $this->respond(['error' => 'Invalid Request.'], 401);
}
log_message('info', 'Rule Engine API response: ' . json_encode($data_eli_run));

return $this->respond(['member' => $data], 200);
// }

// Get input data from the form

// log_message('info', 'Rule Engine API response: ' . $this->request->getVar('previous_emi'));

// print_r($query);
// echo ("<br>");
// print_r($data);
}